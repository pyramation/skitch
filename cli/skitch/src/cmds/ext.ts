import 'skitch-template';
import { promisify } from 'util';
import { sync as mkdirp } from 'mkdirp';
import { exec } from 'child_process';
import { prompt } from 'inquirerer';
import { sync as glob } from 'glob';
import { sqitchPath as path } from 'skitch-utils';
import { dirname, basename, resolve } from 'path';
import * as shell from 'shelljs';
import { writeFileSync, readFileSync } from 'fs';

import plan from './plan';

const questions = [
  {
    name: 'extname',
    message: 'extension name (e.g., app-extensions)',
    default: 'app-extensions',
    required: true,
  },
  {
    name: 'projects',
    type: 'confirm',
    message: 'use sibling sqitch projects?',
    required: true,
  },
];

export default async argv => {
  const sqitchPath = await path();

  const { extname, projects } = await prompt(questions, argv);
  const controlFile = glob(`${sqitchPath}/*.control`);
  const envFile = glob(`${sqitchPath}/.env`);
  if (!controlFile || !controlFile.length) {
    throw new Error('no control file found!');
  }
  if (!envFile || !envFile.length) {
    throw new Error('no control file found!');
  }

  let extensions
  try {
    extensions = readFileSync(controlFile[0]).toString().split('\n').find(line=>line.match(/^requires/)).split('=')[1].split("'")[1].split(',').map(a=>a.trim());
  } catch (e) {
    throw new Error('missing requires from control files or bad syntax');
  }

  let envs
  try {
    envs = readFileSync(envFile[0]).toString().split('\n').reduce((m,line)=>{
      line = (line||'').trim();
      if (/^#/.test(line)) return m;
      if (!line.length) return m;
      const parts = line.split('=');
      m[parts[0].trim()] = parts[1].trim();
      return m;
    }, {});
  } catch (e) {
    throw new Error('missing env files or bad syntax');
  }

  if (projects) {
    envs.PGEXTENSIONS = extensions.join(',');
    writeFileSync(envFile[0], Object.keys(envs).reduce((m,key) => {
      const value = envs[key];
      m = `${m}\n${key}=${value}`;
      return m;
    }, ''));
    return;
  }

  const note = '-- NOTE: this is generated by skitch, extensions are not actually bundled in final output, just used for testing';
  const output = {
    deploy: [note],
    revert: [note],
    verify: [note],
  };

  // DEPLOY
  output.deploy.push(`-- Deploy extensions/${extname} to pg`);
  output.deploy.push('BEGIN;\n');
  extensions.forEach(ext=>{
    output.deploy.push(`CREATE EXTENSION IF NOT EXISTS "${ext}" CASCADE;`);
  });
  output.deploy.push('\nCOMMIT;');

  // REVERT
  output.revert.push(`-- Revert extensions/${extname} from pg`);
  output.revert.push('BEGIN;\n');
  extensions.reverse().forEach(ext=>{
    // certain extensions let us not drop, thanks
    if (ext === 'uuid-ossp') return;
    if (ext === 'plpgsql') return;
    output.revert.push(`DROP EXTENSION IF EXISTS "${ext}";`);
  });
  output.revert.push('\nCOMMIT;');

  // VERIFY
  output.verify.push(`-- Verify extensions/${extname} on pg`);
  output.verify.push('BEGIN;\n');
  extensions.forEach(ext=>{
    output.verify.push(`SELECT verify_extension('${ext}');`);
  });
  output.verify.push('\nROLLBACK;');

  if (others) {

  }

  Object.keys(output).forEach(type=>{
    mkdirp(`${sqitchPath}/${type}/extensions`);
    writeFileSync(`${sqitchPath}/${type}/extensions/${extname}.sql`, output[type].join('\n'));
  });

  const pkg = require(`${sqitchPath}/package.json`);
  await plan({ name: pkg.name });

};
